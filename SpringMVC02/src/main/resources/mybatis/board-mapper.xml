<?xml version="1.0" encoding="UTF-8"?>

<!-- MyBatis -->
<!-- JDBC로 처리하는 상당부분의 코드와 파라미터 설정 및 결과 매핑을 대신할 수 있다. -->
<!-- 쿼리문은 모두 여기 작성할 것이다. -->

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 이걸 집어넣음으로써 단순 xml 파일에서 mapper파일이 된다. -->

<!-- mapper 작성 -->
<!-- namespace와 실행하려하는 태그의 id를 적어줘야한다. resultType은 결과 값을 돌려받을 타입 -->
<mapper namespace="myboard">
	<!-- 쿼리문 -->
	<select id="selectList" resultType="boardDto"><!-- select 태그는 select 문 -->
	<!-- 원래 resultType에 com. 부터 시작해서 BoardDto까지 다 적어야하나, 
		 여기서는 config.xml에 TypeAlias로 별칭을 설정해놨으므로 boardDto만 적어도 동작한다. -->
		SELECT MYNO, MYNAME, MYTITLE, MYCONTENT, MYDATE
		FROM MYBOARD
		ORDER BY MYNO DESC
	</select>
	
	<resultMap type="boardDto" id="boardMap">
		<!-- property는 setter 이용한다. -->
		<!-- setter set 뒤의 이름(일반적으로 필드명)과 컬럼명이 다를 경우 사용한다. -->
		<result property="myno" column="MYNO"/>
		<!-- MYNO 컬럼을 setter 이용해 myno라는 필드에 저장하겠다. 여기선 setter set 뒤 이름과 컬럼명이 동일하니까 굳이 resultMap 안해도 동작한다. -->
		<result property="myname" column="MYNAME"/>
		<!-- MYNAME 컬럼을 setter 이용해 myname라는 필드에 저장하겠다. 여기선 setter set 뒤 이름과 컬럼명이 동일하니까 굳이 resultMap 안해도 동작한다. -->
		<result property="mytitle" column="MYTITLE"/>
		<result property="mycontent" column="MYCONTENT"/>
		<result property="mydate" column="MYDATE"/>
	</resultMap>
	<!-- resultType보다 더 상세하게 리턴 타입 내용을 정의할 수 있다. -->
	
	<select id="selectOne" resultMap="boardMap">
		 SELECT * FROM MYBOARD WHERE MYNO=#{myno}
		 <!-- 넘겨받은 myno를 넣어준다. -->		
	</select>
	
	<insert id="insert" parameterType="boardDto">
	<!-- insert 태그는 inset문. 정수 값만 넘어오기때문에 따로 결과 타입을 설정할 필요는 없다. -->
	<!-- parameterType은 넘어온 파리미터의 타입을 명시해준다. 단, 반드시 작성하지 않아도 문제없이 동작한다. -->
		INSERT INTO MYBOARD VALUES(NULL, #{myname}, #{mytitle}, #{mycontent}, NOW());
		<!-- 넘겨받은 BoardDto dto 객체에 저장된 값들을 setter로 가져온다. -->
	</insert>
</mapper>