<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<!-- 비공통부(CC) 객체 생성 -->
	<bean id="man" class="com.test03.Man"/>
	<bean id="woman" class="com.test03.Woman"/>
	
	<!-- 공통부(CCC) 객체 생성 -->
	<bean id="myAspect" class="com.test03.MyAspect"/>
	
	<!-- AOP 설정 -->
	<!-- Namespaces에서 aop 체크해준다. -->
	<aop:config>
	<!-- proxy가 target을 가로채서, target 실행 전에 advice를 정해진 시점에 맞춰 끼워넣어 실행한다. -->
	<!-- 여기서는 따로 프록시를 만들지는 않았다. -->
		<aop:aspect ref="myAspect">
		<!-- aspect 객체로 myAspect를 참조시킨다. -->
			<aop:before method="before" pointcut="execution(public * *(..))"/>
			<!-- target Object 실행 이전에 실행 -> before Advice -->
			<!-- public 모든 리턴타입 모든 메소드명(모든 매개변수) 형태의 타겟 메소드 실행 전에 before라는 메소드를 실행한다. -->
			<aop:after method="after" pointcut="execution(public * com.test03.Woman.classWork(..))"/>
			<!-- target Object 실행 이후에 실행 -> After Advice -->
			<!-- public 모든 리턴타입 Woman 클래스의 classWork(모든 매개변수) 형태의 타겟 메소드 실행 후에 after라는 메소드를 실행한다. -->
			<!-- 내가 원하는 형태의 메소드만 실행시키려면 execution 안에 ()에 정확히 메소드를 적어줘야한다. -->
			<!-- 이러면 Man 객체의 classWork 메소드 실행할 때, after 메소드는 동작하지 않는다. -->
		</aop:aspect>
	</aop:config>

</beans>
